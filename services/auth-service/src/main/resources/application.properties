# =========================
# Auth service - application.properties
# =========================

# Server
server.port=8080
spring.application.name=auth-service

# Datasource (dev: H2) - replace with Postgres settings in prod
spring.datasource.url=jdbc:postgresql://localhost:5432/auth_service
spring.datasource.username=admin_user1
spring.datasource.password=123456789
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

logging.level.org.springframework.security=DEBUG

spring.datasource.hikari.auto-commit=false
# JWT (use env var APP_JWT_SECRET in prod / Vault)
#app.jwt.secret=${APP_JWT_SECRET:changeit-changeit-changeit-changeit}
#app.jwt.expiration-ms=${APP_JWT_EXPIRATION_MS:3600000}   # 1 hour default
#app.jwt.refresh-expiration-ms=${APP_JWT_REFRESH_EXPIRATION_MS:2592000000} # 30 days
#
## OAuth2 (Google) - set GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET in env for social login
#spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:}
#spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:}
#spring.security.oauth2.client.registration.google.scope=openid,profile,email
#spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
#spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
#
## Frontend redirect after social login
#app.frontend.redirect-uri=${APP_FRONTEND_REDIRECT:http://localhost:3000/oauth-success}
#
## Logging
#logging.level.org.example.jobmatch=INFO
